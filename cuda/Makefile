# Author: Antonio Langella

CC = nvcc
CFLAGS = -W -Wall -g

BIN_DIR := ./bin
SRC_DIR := ./src
COMM_DIR := ../common
PWD := $(shell pwd)
BASENAME := $(shell basename $(PWD))
TARGET := $(BIN_DIR)/$(BASENAME)

SCR_DIRS := $(shell find $(SRC_DIR) -type d)
# Look for .c source file in every subdir of src/
vpath %.c $(SCR_DIRS)
#SRCS contains the names of all source files under src/
SRCS := $(shell find $(SRC_DIR) -name '*.cpp' -or -name '*.c' -or -name '*.cu' -printf "%f ")
#HDRS contains the paths of all header files under src/
HDRS := $(shell find $(SRC_DIR) -name '*.h')
#OBJ contains the paths of all object files to be created under bin/
OBJS := $(patsubst %.c,$(BIN_DIR)/%.o,$(SRCS))

LIB_SRCS_NAMES := $(shell find $(COMM_DIR)/src -name '*.cpp' -or -name '*.c' -printf "%f ")
LIB_SRCS := $(shell find $(COMM_DIR)/src -name '*.cpp' -or -name '*.c')
LIB_HDRS := $(shell find $(COMM_DIR)/include -name '*.h')
LIB_OBJS := $(patsubst %.c,$(COMM_DIR)/obj/%.o,$(LIB_SRCS_NAMES))

INCLUDE_STR := $(patsubst %, -I%, $(SCR_DIRS))
INCLUDE_STR += -I$(COMM_DIR)/include

$(TARGET).out: $(OBJS) $(HDRS) $(LIB_OBJS) $(LIB_HDRS) $(LIB_SRCS)
	@mkdir -p $(BIN_DIR)
	$(CC) $(CFLAGS) $(OBJS) $(LIB_OBJS) -lm -O0 -o $(TARGET)_O0.out
	$(CC) $(CFLAGS) $(OBJS) $(LIB_OBJS) -lm -O1 -o $(TARGET)_O1.out
	$(CC) $(CFLAGS) $(OBJS) $(LIB_OBJS) -lm -O2 -o $(TARGET)_O2.out
	$(CC) $(CFLAGS) $(OBJS) $(LIB_OBJS) -lm -O3 -o $(TARGET)_O3.out

#Every bin/%.o file is generated by compiling the matching %.c in src/ plus header files
$(BIN_DIR)/%.o: %.c $(HDRS)
	@mkdir -p $(BIN_DIR)
	$(CC) $(CFLAGS) -c $< $(INCLUDE_STR) -o $@

#&: assures that common will be built only once when needed
$(LIB_OBJS) &: $(LIB_HDRS) $(LIB_SRCS)
	@cd $(COMM_DIR) && $(MAKE)

.PHONY: clean
clean:
	rm -f $(OBJS) $(TARGET)